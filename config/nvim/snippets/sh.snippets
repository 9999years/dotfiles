snippet colors ANSI color definitions
	RESET="$(echo -e "\e[0m")"
	BOLD="$(echo -e "\e[1m")"
	RESET_BOLD="$(echo -e "\e[21m")"
	DIM="$(echo -e "\e[2m")"
	RESET_DIM="$(echo -e "\e[22m")"
	UNDERLINED="$(echo -e "\e[4m")"
	RESET_UNDERLINED="$(echo -e "\e[24m")"
	BRRED="$(echo -e "\e[31m")"
	RED="$(echo -e "\e[91m")"
	BRGREEN="$(echo -e "\e[32m")"
	GREEN="$(echo -e "\e[92m")"
	BRYELLOW="$(echo -e "\e[33m")"
	YELLOW="$(echo -e "\e[93m")"
	BRBLUE="$(echo -e "\e[34m")"
	BLUE="$(echo -e "\e[94m")"
	BRPURPLE="$(echo -e "\e[35m")"
	PURPLE="$(echo -e "\e[95m")"
	BRCYAN="$(echo -e "\e[36m")"
	CYAN="$(echo -e "\e[96m")"
	BRGRAY="$(echo -e "\e[37m")"
	GRAY="$(echo -e "\e[97m")"
	RESET_FG="$(echo -e "\e[39m")"

snippet logging Logging boilerplate
	readonly PROG_NAME="\$0"

	function now { date +%FT%T; }

	function _log {
		color="\$1"
		shift
		level="\$1"
		shift
		>&2 echo -n "\$color\$level \$PROG_NAME \${color}[$(now)]:" "$@"
		RESET
	}

	function dbg   { _log "${GRAY}${DIM}"   "[debug]" "$@"; }
	function info  { _log "${BRGREEN}"      "[info] " "$@"; }
	function warn  { _log "${BRYELLOW}"     "[warn] " "$@"; }
	function error { _log "${BRRED}"        "[error]" "$@"; }
	function fatal { _log "${BOLD}${BRRED}" "[FATAL]" "$@"; exit 1; }
	function cmd   { _log "${CYAN}"         "[run]  " "\$ ${BOLD}${UNDERLINED}$*"; }

snippet dbg Debug output
	>&2 echo -e "$1"

snippet array Create a new array variable
	${1:ARRAY}=()

snippet append Append to an array variable
	${1:ARRAY}+=(${2:"element"})

snippet usearr Use an array variable as arguments
	"\${${1:ARRAY}[@]}"

snippet iterarr Iterate over array elements
	for ${1:i} in "\${${2:ARRAY}[@]}"; do
		echo "\$${1}"
	done

snippet join Join an array variable by a delimiter string
	( IFS=${1:\$'\n'}; echo "\${${2:ARRAY}[*]}" )

snippet len Array length
	\${#${1:ARRAY}[@]}

snippet quote Shell-quote a variable for reuse as input
	\${${1:variable}@Q}

snippet default Get a variable or a default value if unset/empty
	\${${1:variable}:-${2:default}}

snippet stripPrefix Strip a string from the start of a variable
	\${${1:variable}##${2:prefix}}

snippet stripSuffix Strip a string from the end of a variable
	\${${1:variable}%%${2:suffix}}

snippet replace Replace a substring in a variable
	\${${1:variable}//${2:find}/${3:replace}}

snippet replace1 Replace the first instance of a substring in a variable
	\${${1:variable}/${2:find}/${3:replace}}

snippet replacePrefix Replace a prefix in a variable
	\${${1:variable}/#${2:find}/${3:replace}}

snippet replaceSuffix Replace a suffix in a variable
	\${${1:variable}/%${2:find}/${3:replace}}

snippet nl Literal newline character
	\$'\n'

snippet arith Arithmetic expression
	(( ${1:i += 1} ))

snippet nargs Number of arguments
	(( "$#" ))

snippet argparse Argument parsing
	readonly USAGE="Usage: \$0 $1"
	declare -a args
	while (( "$#" ))
	do
		case "\$1" in
			-h|--help)
				echo "$USAGE"
				exit
				;;
			--)
				shift
				break
				;;
			*)
				args+=("\$1")
				;;
		esac
		shift
	done
	args+=("$@")

snippet lines Iterate over program stdout as lines
	while IFS="" read -r ${1:line} || [[ -n "\$$1" ]]
	do
		${0:echo "Line: \$$1"}
	done < ${2:<(ps aux)}

snippet scriptdir The directory the script is stored in
	${1:SCRIPT_DIR}="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

snippet heredoc Multiline string
	<< ${1:EOF}
	$0
	$1

snippet regex Match string against regex
	[[ "${1:\$input}" =~ "${2:.*}" ]]

snippet glob Match string against glob
	[[ "${1:\$input}" = ${2:*glob*} ]]

snippet contains Check if string contains substring
	[[ "${1:\$input}" = *"${2:infix}"* ]]

snippet substr Check if string contains substring
	[[ "${1:\$input}" = *"${2:infix}"* ]]

snippet empty Check if a string is empty
	[[ -z "${1:\$input}" ]]

snippet nonempty Check if a string is non-empty
	[[ -n "${1:\$input}" ]]

snippet exists Check if a file exists
	[[ -e "${1:\$path}" ]]

snippet defined Check if a variable is defined
	[[ -v ${1:variable_name} ]]

snippet onexit Run a function when the script exits
	function cleanup {
		$1
	}
	trap cleanup EXIT

snippet noecho Run a command without `set -x` echoing it
	# See: https://unix.stackexchange.com/a/60049
	(
		{ set +x; } 2> /dev/null # silently disable xtrace
		${1:echo "debug"}
		set -x
	)
